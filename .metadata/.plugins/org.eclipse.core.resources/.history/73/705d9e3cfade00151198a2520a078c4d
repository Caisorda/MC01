package model;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;

import db.DBConnector;

public class Household_ProduceDAO {
	private final String[] basicCrops = {"Sugar Cane", "Palay", "Corn", "Coffee"};
	private final String[] basicFish = {"Tilapia", "Milkfish", "Catfish", "Mudfish", "Carp"};
	 Connection connection;
	 
	public Household_ProduceDAO(){
		connection = DBConnector.getConnection();
		System.out.println("household dao initialized.");
	}
	
	public Iterator getHouseHoldCount(){
		ArrayList<NumberProducer> counts = new ArrayList();
		//System.out.println("household dao initialized.");
		try{
			String query = "select "
					   + "( SELECT COUNT(live_a_hog) AS goat FROM hpq_hh where live_a_hog =1 ) as hog, "
					   + "( SELECT COUNT(live_a_goat) AS goat FROM hpq_hh where live_a_goat =1 ) as goat, "
					   + "( SELECT COUNT(live_a_carabao) AS goat FROM hpq_hh where live_a_carabao =1 ) as carabao, "
					   + "( SELECT COUNT(live_a_cow) AS goat FROM hpq_hh where live_a_cow =1 ) as cow, "
					   + "( SELECT COUNT(live_a_chicken) AS goat FROM hpq_hh where live_a_chicken =1 ) as chicken, "
					   + "( SELECT COUNT(live_a_duck) AS goat FROM hpq_hh where live_a_duck =1 ) as duck, "
					   + "(SELECT COUNT(live_a_duck) AS goat FROM hpq_hh where live_a_others =1 ) as others, "
					   + "(SELECT  COUNT(distinct aquanitype_o)   "
					   + "from hpq_aquani a, hpq_hh h  "
					   + "where a.hpq_hh_id = h.id AND aquanitype=6) as aquani, "
					   + "(SELECT COUNT( croptype) as crops "
					   + "from  hpq_hh h,hpq_crop c where c.hpq_hh_id = h.id) as crops ";
			PreparedStatement preps = connection.prepareStatement(query);
			
			long start = System.currentTimeMillis();
            ResultSet rs = preps.executeQuery();
            long end = System.currentTimeMillis();
            System.out.println("Input: \"Household\"");
			System.out.println(1.0*(end - start)/1000);
			System.out.println();
			
			if(rs.next()){
				counts.add(new NumberProducer("Pig", rs.getLong("hog")));
				counts.add(new NumberProducer("Chicken", rs.getLong("chicken")));
				counts.add(new NumberProducer("Carabao", rs.getLong("carabao")));
				counts.add(new NumberProducer("Cow", rs.getLong("cow")));
				counts.add(new NumberProducer("Goat", rs.getLong("goat")));
				counts.add(new NumberProducer("Duck", rs.getLong("duck")));
				counts.add(new NumberProducer("Other Livestock", rs.getLong("others")));
				counts.add(new NumberProducer("Crops", rs.getLong("crops")));
				counts.add(new NumberProducer("Sea Produce", rs.getLong("aquani")));
				
			}
			}catch(SQLException sqle){
				System.out.println("problem in dao.");
			}
			return counts.iterator();
					
	
		}
	
	public Iterator optimizedHouseHoldCount(){
		ArrayList<NumberProducer> counts = new ArrayList();
		//System.out.println("household dao initialized.");
		try{
			String query = "SELECT "
					+ "COUNT(NULLIF(live_a_hog, 2)) AS hog, "
					+ "COUNT(NULLIF(live_a_goat, 2)) AS goat, "
					+ "COUNT(NULLIF(live_a_carabao, 2)) AS carabao, "
					+ "COUNT(NULLIF(live_a_cow, 2)) AS cow, "
					+ "COUNT(NULLIF(live_a_chicken, 2)) AS chicken, "
					+ "COUNT(NULLIF(live_a_duck, 2)) AS duck "
					+ "FROM "
					+ "combinedtable h";
			PreparedStatement preps = connection.prepareStatement(query);

			long start = System.currentTimeMillis();
			ResultSet rs = preps.executeQuery();
			long end = System.currentTimeMillis();
			System.out.println("Input: \"Household\"");
			System.out.println(1.0*(end - start)/1000);
			System.out.println();

			if(rs.next()){
				counts.add(new NumberProducer("Pig", rs.getLong("hog")));
				counts.add(new NumberProducer("Chicken", rs.getLong("chicken")));
				counts.add(new NumberProducer("Carabao", rs.getLong("carabao")));
				counts.add(new NumberProducer("Cow", rs.getLong("cow")));
				counts.add(new NumberProducer("Goat", rs.getLong("goat")));
				counts.add(new NumberProducer("Duck", rs.getLong("duck")));
				counts.add(new NumberProducer("Other Livestock", rs.getLong("others")));
				counts.add(new NumberProducer("Crops", rs.getLong("crops")));
				counts.add(new NumberProducer("Sea Produce", rs.getLong("aquani")));

			}
		}catch(SQLException sqle){
			System.out.println("problem in dao.");
		}
		return counts.iterator();


	}
	
	public Iterator getTownCount(){
		ArrayList<NumberProducer> counts = new ArrayList();
		try{
			String query = "select (select COUNT(duck) as ducks "
					+ "from (select live_a_duck as duck "
					+ "from combinedtable h where  live_a_duck=1 "
					+ "group by mun)  a)  duck, "
					+ "(select COUNT(chicken) as chickens "
					+ "from (select live_a_chicken as chicken "
					+ "from combinedtable h where live_a_chicken=2 "
					+ "group by mun) b )  chicken, "

					+ "(select COUNT(cow) as cows "
					+ "from (select live_a_cow as cow "
					+ "from combinedtable h where live_a_cow =2 "

					+ "group by mun) c )  cow, "

					+ "(select COUNT(carabao) as carabaos "
					+ "from (select live_a_carabao as carabao "
					+ "from combinedtable h where  live_a_carabao=1 "
					+ "group by mun) d )  carabao, "

					+ "(select COUNT(goat) as goats "
					+ "from (select live_a_goat  as goat "
					+ "from combinedtable h where  live_a_goat=1 "
					+ "group by mun) e ) goat, "

					+ "(select COUNT(hog) as hogs "
					+ "from (select live_a_hog as hog "
					+ "from combinedtable h where   live_a_hog=1 "
					+ "group by mun) a ) AS hog, "

					+ "(select COUNT(hog) as hogs "
					+ "from (select live_a_others as others "
					+ "from combinedtable h where live_a_others=1 "
					+ "group by mun) a ) AS others, "

					+ "(select COUNT(*) as seafood "
					+ "from (select count(distinct aquanitype_o)as sea_creatures "
					+ "from combinedtable h "
					+ "where aquanitype=6 "
					+ "group by mun) a where sea_creatures>0) as seafood, "
					+ "(select COUNT(*) as crops "
					+ "from (select count( h.croptype) as crop "
					+ "from combinedtable h "
					+ "group by mun) a where crop>0) as crops";

			PreparedStatement preps = connection.prepareStatement(query);
			
			long start = System.currentTimeMillis();
            ResultSet rs = preps.executeQuery();
            long end = System.currentTimeMillis();
            System.out.println("Input: \"Town\"");
			System.out.println(1.0*(end - start)/1000);
			System.out.println();
			
			if(rs.next()){
				counts.add(new NumberProducer("Pig", rs.getLong("hog")));
				counts.add(new NumberProducer("Chicken", rs.getLong("chicken")));
				counts.add(new NumberProducer("Carabao", rs.getLong("carabao")));
				counts.add(new NumberProducer("Cow", rs.getLong("cow")));
				counts.add(new NumberProducer("Goat", rs.getLong("goat")));
				counts.add(new NumberProducer("Duck", rs.getLong("duck")));
				counts.add(new NumberProducer("Other Livestock", rs.getLong("others")));
				counts.add(new NumberProducer("Crops", rs.getLong("crops")));
				counts.add(new NumberProducer("Sea Produce", rs.getLong("seafood")));
				
			}
			}catch(SQLException sqle){
				System.out.println("problem in dao.");
			}
			return counts.iterator();
	}
}
	

